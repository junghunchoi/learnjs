// 14. 전역 변수의 문제점

// 지역 변수는 함수 전체에서 유효하다, 하지만 변수 할당문이 실행되기 전까진 undefined

var x = 'global';

function foo() {
    console.log(x);
    var x = 'local';
}

foo(); // undefined
console.log(x); // global

// 전역 변수의 문제점

/**
 * 1) 암묵적 결합
   전역변수는 어디서든 참조하고 할당할 수 있는 변수를 사용하갰다는 의미
   이는 유효범위가 크면 클수록 코드의 가독성은 나빠지고 의도치 않게 상태가 변경될 수 있는
   위험성이 높아진다.

   2) 긴 생명주기
   생명주기가 긴 전역변수는 변수 이름이 주복될 가능성이 있으며 의도치 않은 재할당이 이뤄질
   수 있다.

   3)스코프 체인 상에서 종점에 존재한다.
   전역 변수는 가장 마지막에 검색된다. 따라서 검색 속도가 가장 느리다.

   4) 네임스페이스 오염
   의도치 않게 다른 파일내의 동일한 이름으로 명명된 변수 또는 함수가 있을 수 있다.
 */

//------
// 억제하는 방법

// 전역변수를 반드시 사용해야할 이유가 없다면 지역변수를 사용해야한다.
// 변수의 스코프는 작을수록 좋다.

// 1) 즉시 실행 함수
// 즉시 실행 함수로 감싸면 모든 변수는 즉시 실행 함수의 지역변수가 된다.

(function(){
    var foo = 10;
})

console.log(foo) // referenceerror : foo is not defined

// 2) 네임스페이스 객체
// 네임스페이스 역할 담당을 할 객체를 생성하고 전역변수처럼 사용하고 싶은 변수를
// 프로퍼티에 추가한다.

const MYMAP = {}; // 전역 네임스페이스 객체
MYMAP.name = 'Lee';
console.log(MYMAP.name);//lee

// 계층적으로 구성할 수 있다.
MYMAP.person = {
    name : 'choi',
    address : 'Seoul'
}
console.log(MYMAP.person.name); // choi
